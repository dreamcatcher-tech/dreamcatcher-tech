"use strict";(self.webpackChunk_dreamcatcher_tech_dreamcatcher_website=self.webpackChunk_dreamcatcher_tech_dreamcatcher_website||[]).push([[9320],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>d});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),l=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):c(c({},t),e)),r},p=function(e){var t=l(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),h=l(r),d=a,m=h["".concat(s,".").concat(d)]||h[d]||u[d]||o;return r?n.createElement(m,c(c({ref:t},p),{},{components:r})):n.createElement(m,c({ref:t},p))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,c=new Array(o);c[0]=h;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,c[1]=i;for(var l=2;l<o;l++)c[l]=r[l];return n.createElement.apply(null,c)}return n.createElement.apply(null,r)}h.displayName="MDXCreateElement"},27164:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>c,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var n=r(83117),a=(r(67294),r(3905));const o={},c="R25 Dreamcatcher Pulse Explorer",i={unversionedId:"Requests/R25",id:"Requests/R25",title:"R25 Dreamcatcher Pulse Explorer",description:"\\* make the dreamcatcher logo be an actual explorable graph, made up of parts of the dreamcatcher we are building",source:"@site/dust/Requests/R25.md",sourceDirName:"Requests",slug:"/Requests/R25",permalink:"/dust/Requests/R25",draft:!1,editUrl:"https://github.com/dreamcatcher-tech/dreamcatcher-tech.github.io/edit/master/website/dust/Requests/R25.md",tags:[],version:"current",frontMatter:{},sidebar:"dust",previous:{title:"R24 IPFS ORM",permalink:"/dust/Requests/R24"},next:{title:"I04 Securities Guardian",permalink:"/dust/Ideas/I04"}},s={},l=[],p={toc:l};function u(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"r25-dreamcatcher-pulse-explorer"},"R25 Dreamcatcher Pulse Explorer"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"*")," make the dreamcatcher logo be an actual explorable graph, made up of parts of the dreamcatcher we are building\n",(0,a.kt)("strong",{parentName:"p"},"*")," by picking params of the graph, could make it look like a dreamcatcher\n",(0,a.kt)("strong",{parentName:"p"},"*")," should respect pathing as well as subsections of the CID graph\n",(0,a.kt)("strong",{parentName:"p"},"*")," link each piece to the docs about that piece in the MD doc"),(0,a.kt)("p",null,"Overlay DAGs within the App Complex\nA chain application is made up of an approot and any number of children. Within this tree of children, there are 3 overlay DAGs which can be navigated directly:"),(0,a.kt)("p",null,"The state tree (the knowledge of the complex)\nThe metadata tree (the liveliness of the complex)\nThe binary tree (the files of the complex)\nEach of these is referenced and pushed up to the root. This allows the state hash to be queried for when it changes, and know that none of the child states changed either."))}u.isMDXComponent=!0}}]);