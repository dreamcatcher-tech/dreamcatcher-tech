"use strict";(self.webpackChunk_dreamcatcher_tech_dreamcatcher_website=self.webpackChunk_dreamcatcher_tech_dreamcatcher_website||[]).push([[7156],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),d=c(n),h=o,f=d["".concat(l,".").concat(h)]||d[h]||p[h]||i;return n?r.createElement(f,s(s({ref:t},u),{},{components:n})):r.createElement(f,s({ref:t},u))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,s=new Array(i);s[0]=d;var a={};for(var l in t)hasOwnProperty.call(t,l)&&(a[l]=t[l]);a.originalType=e,a.mdxType="string"==typeof e?e:o,s[1]=a;for(var c=2;c<i;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},72664:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>a,toc:()=>c});var r=n(83117),o=(n(67294),n(3905));const i={},s="R15 Immutable Permissioning",a={unversionedId:"Requests/R15",id:"Requests/R15",title:"R15 Immutable Permissioning",description:"IPFS has many great tools for content addressing data systems, but none of them deal will with read permissioning. Encrypting the files is not a solution - true privacy means no unauthorized actor has even the encrypted files.",source:"@site/dust/Requests/R15.md",sourceDirName:"Requests",slug:"/Requests/R15",permalink:"/dust/Requests/R15",draft:!1,editUrl:"https://github.com/dreamcatcher-tech/dreamcatcher-tech.github.io/edit/master/website/dust/Requests/R15.md",tags:[],version:"current",frontMatter:{},sidebar:"dust",previous:{title:"R14 Debugging Dreamcatchers",permalink:"/dust/Requests/R14"},next:{title:"R16 Provenance Accounting",permalink:"/dust/Requests/R16"}},l={},c=[{value:"Publicizing the AppRoot chainId",id:"publicizing-the-approot-chainid",level:2},{value:"Other Uses",id:"other-uses",level:2},{value:"References",id:"references",level:2}],u={toc:c};function p(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"r15-immutable-permissioning"},"R15 Immutable Permissioning"),(0,o.kt)("p",null,"IPFS has many great tools for content addressing data systems, but none of them deal will with read permissioning. Encrypting the files is not a solution - true privacy means no unauthorized actor has even the encrypted files."),(0,o.kt)("p",null,"This privacy needs to be contained not in the file content, but also the file hashes, so that all aspects of network traffic maintain complete secrecy from the unauthorized nodes."),(0,o.kt)("p",null,"This proposal centres around the concept of using the content that is being asked for as the reference for determining the permissioning instructions for itself. This is purely read based permissioning, as IPFS has strong write permissioning via its cryptographic model."),(0,o.kt)("p",null,"The proposal provides a walk path for any given piece of content that needs to be walked to ultimately find the list of permissible readers of the content. In the Interblock system, this will be:"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"content.network.approot -> content.network.ACL -> content.state.allowRead")),(0,o.kt)("p",null,"Until this walk completes and confirms that the requesting node is allowed to read the data they requested, we will act as tho we have never seen this data, and will decoy requests out to other nodes for the peerwant lists, so that a traffic observe could not know if we had what was asked or not."),(0,o.kt)("h2",{id:"publicizing-the-approot-chainid"},"Publicizing the AppRoot chainId"),(0,o.kt)("p",null,"Unless a node is provided with valid bootstrap nodes, it will need to ask publicly for connections until it finds someone with the approot. Strategies could be employed to discover this without raising suspicion, but for now the approot chainId should be considered public"),(0,o.kt)("h2",{id:"other-uses"},"Other Uses"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"publishing whitelists of files that are guaranteed conflict free, so no infringements, plus automatic takedowns if you want, as the lists are updateable")),(0,o.kt)("h2",{id:"references"},"References"),(0,o.kt)("p",null,"A good source of ideas might be the efforts for integration of tor with IPFS, as privacy leakage needs to be tightly controlled there too."))}p.isMDXComponent=!0}}]);