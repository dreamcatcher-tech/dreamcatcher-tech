"use strict";(self.webpackChunk_dreamcatcher_tech_dreamcatcher_website=self.webpackChunk_dreamcatcher_tech_dreamcatcher_website||[]).push([[7675],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>p});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),d=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=d(e.components);return n.createElement(s.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),m=d(r),p=a,y=m["".concat(s,".").concat(p)]||m[p]||l[p]||o;return r?n.createElement(y,i(i({ref:t},u),{},{components:r})):n.createElement(y,i({ref:t},u))}));function p(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=m;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var d=2;d<o;d++)i[d]=r[d];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},96427:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>l,frontMatter:()=>o,metadata:()=>c,toc:()=>d});var n=r(83117),a=(r(67294),r(3905));const o={},i=void 0,c={unversionedId:"dictionary/User_Dictionary/Dream",id:"dictionary/User_Dictionary/Dream",title:"Dream",description:"Typeof: Object",source:"@site/docs/dictionary/User_Dictionary/Dream.md",sourceDirName:"dictionary/User_Dictionary",slug:"/dictionary/User_Dictionary/Dream",permalink:"/docs/dictionary/User_Dictionary/Dream",draft:!1,editUrl:"https://github.com/dreamcatcher-tech/dreamcatcher-tech.github.io/edit/master/website/docs/dictionary/User_Dictionary/Dream.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Demand",permalink:"/docs/dictionary/User_Dictionary/Demand"},next:{title:"Fork",permalink:"/docs/dictionary/User_Dictionary/Fork"}},s={},d=[],u={toc:d};function l(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Typeof: Object"),(0,a.kt)("p",null,"Dreams are the founding ideas and aspirations behind a Project. They can be created by Forking a Wish or an Issue into a Branch, embedded in a Project\u2019s Dreams object.\nDreams are intended to steer Projects towards a clear outcome. There can be any number of Dreams in a Project, including zero."),(0,a.kt)("p",null,"By the time a Dream is Forked into a Project, it is expected (but not required), that the Wish or Issue that it was Forked from had benefited from a number of Comments and Pull Requests to deduplicate and hone the idea, and from Upvotes and incoming Weak Links to indicate whether it is a useful idea."))}l.isMDXComponent=!0}}]);