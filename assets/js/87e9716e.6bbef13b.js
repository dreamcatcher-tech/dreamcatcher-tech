"use strict";(self.webpackChunk_dreamcatcher_tech_dreamcatcher_website=self.webpackChunk_dreamcatcher_tech_dreamcatcher_website||[]).push([[6461],{3905:(e,r,t)=>{t.d(r,{Zo:()=>l,kt:()=>d});var n=t(67294);function i(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function c(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){i(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function a(e,r){if(null==e)return{};var t,n,i=function(e,r){if(null==e)return{};var t,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(i[t]=e[t]);return i}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=n.createContext({}),u=function(e){var r=n.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):c(c({},r),e)),t},l=function(e){var r=u(e.components);return n.createElement(s.Provider,{value:r},e.children)},m={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},p=n.forwardRef((function(e,r){var t=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,l=a(e,["components","mdxType","originalType","parentName"]),p=u(t),d=i,y=p["".concat(s,".").concat(d)]||p[d]||m[d]||o;return t?n.createElement(y,c(c({ref:r},l),{},{components:t})):n.createElement(y,c({ref:r},l))}));function d(e,r){var t=arguments,i=r&&r.mdxType;if("string"==typeof e||i){var o=t.length,c=new Array(o);c[0]=p;var a={};for(var s in r)hasOwnProperty.call(r,s)&&(a[s]=r[s]);a.originalType=e,a.mdxType="string"==typeof e?e:i,c[1]=a;for(var u=2;u<o;u++)c[u]=t[u];return n.createElement.apply(null,c)}return n.createElement.apply(null,t)}p.displayName="MDXCreateElement"},48082:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>s,contentTitle:()=>c,default:()=>m,frontMatter:()=>o,metadata:()=>a,toc:()=>u});var n=t(83117),i=(t(67294),t(3905));const o={},c=void 0,a={unversionedId:"dictionary/User_Dictionary/Terminus Fork, Terminus Merge",id:"dictionary/User_Dictionary/Terminus Fork, Terminus Merge",title:"Terminus Fork, Terminus Merge",description:"When a Origin is in agreement it can be killed after that Fork or Merge is successful. This is achieved by the Object being terminated freezing, followed by the Pull Request for the Fork or Merge.",source:"@site/docs/dictionary/User_Dictionary/Terminus Fork, Terminus Merge.md",sourceDirName:"dictionary/User_Dictionary",slug:"/dictionary/User_Dictionary/Terminus Fork, Terminus Merge",permalink:"/docs/dictionary/User_Dictionary/Terminus Fork, Terminus Merge",draft:!1,editUrl:"https://github.com/dreamcatcher-tech/dreamcatcher-tech.github.io/edit/master/website/docs/dictionary/User_Dictionary/Terminus Fork, Terminus Merge.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Target",permalink:"/docs/dictionary/User_Dictionary/Target"},next:{title:"Trace Minting Process",permalink:"/docs/dictionary/User_Dictionary/Trace Minting Process"}},s={},u=[],l={toc:u};function m(e){let{components:r,...t}=e;return(0,i.kt)("wrapper",(0,n.Z)({},l,t,{components:r,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"When a Origin is in agreement it can be killed after that Fork or Merge is successful. This is achieved by the Object being terminated freezing, followed by the Pull Request for the Fork or Merge."))}m.isMDXComponent=!0}}]);