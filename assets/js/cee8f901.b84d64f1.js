"use strict";(self.webpackChunk_dreamcatcher_tech_dreamcatcher_website=self.webpackChunk_dreamcatcher_tech_dreamcatcher_website||[]).push([[1601],{78943:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>l,contentTitle:()=>s,default:()=>g,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var n=t(87462),i=(t(67294),t(3905));const r={published:!1,title:"Natural Language Apps",description:""},s=void 0,o={permalink:"/blog/2024/10/15/napp-package-format",editUrl:"https://github.com/dreamcatcher-tech/dreamcatcher-tech.github.io/edit/master/website/blog/2024-10-15-napp-package-format.md",source:"@site/blog/2024-10-15-napp-package-format.md",title:"Natural Language Apps",description:"",date:"2024-10-15T00:00:00.000Z",formattedDate:"October 15, 2024",tags:[],readingTime:2.9,hasTruncateMarker:!0,authors:[],frontMatter:{published:!1,title:"Natural Language Apps",description:""},nextItem:{title:"Hurry up and Wait",permalink:"/blog/2024/09/18/hurry-up-and-wait"}},l={authorsImageUrls:[]},p=[{value:"Rationale for a New Package Format",id:"rationale-for-a-new-package-format",level:2},{value:"Bridging Programming Languages and AI through JSON",id:"bridging-programming-languages-and-ai-through-json",level:3},{value:"The &quot;napp&quot; Format Specification",id:"the-napp-format-specification",level:2},{value:"Key Features",id:"key-features",level:3},{value:"Use Cases and Applications",id:"use-cases-and-applications",level:2},{value:"Serverless Platform Integration",id:"serverless-platform-integration",level:3},{value:"Browser Compatibility",id:"browser-compatibility",level:3},{value:"AI and LLM Integration",id:"ai-and-llm-integration",level:3},{value:"Conclusion",id:"conclusion",level:2}],c={toc:p};function g(e){let{components:a,...r}=e;return(0,i.kt)("wrapper",(0,n.Z)({},c,r,{components:a,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},'"napps: a universal package format to make all code AI callable"')),(0,i.kt)("p",null,(0,i.kt)("img",{src:t(54174).Z,width:"1344",height:"768"})),(0,i.kt)("br",null),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"Give me a json function interface and an execution environment and I will move\nthe whole world")),(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("em",{parentName:"p"},"LLMs everywhere trying to do their jobs"))),(0,i.kt)("p",null,'The fundamental principle of the "napp" format is to provide a unified interface for deterministic computing (classical code) and probabilistic computing (AI), enabling these two paradigms to work together effectively by presenting as a single, highly tested, reusable unit.'),(0,i.kt)("h2",{id:"rationale-for-a-new-package-format"},"Rationale for a New Package Format"),(0,i.kt)("h3",{id:"bridging-programming-languages-and-ai-through-json"},"Bridging Programming Languages and AI through JSON"),(0,i.kt)("p",null,"Traditional package formats are inherently tied to specific programming languages, necessitating custom tools or language-specific package managers for invocation. This fragmentation introduces significant challenges, particularly in an era where AI systems, such as large language models (LLMs), increasingly interface with code across multiple languages."),(0,i.kt)("p",null,'JSON has emerged as a universal data interchange format, both language-agnostic and conducive to AI integration. By standardizing function calls across all languages using JSON, the "napp" format ensures compatibility with AI and natural language processing systems. This approach simplifies cross-language interoperability and leverages the capabilities of LLMs in understanding and generating JSON-formatted data.'),(0,i.kt)("h2",{id:"the-napp-format-specification"},'The "napp" Format Specification'),(0,i.kt)("h3",{id:"key-features"},"Key Features"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Language-Agnostic Execution"),': "napp" packages will support all major programming languages, including Python, JavaScript, Go, and Rust. An efficient translation layer routes JSON calls to native function calls, enabling seamless interaction across languages.')),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Security and Permissions"),": Each package explicitly defines its required permissions (e.g., network access, filesystem operations). The execution environment enforces these permissions to ensure secure operation and prevent unauthorized actions.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Git-Based Version Control"),": Packages are stored in Git repositories, enabling comprehensive version tracking, content deduplication, and efficient updates through delta changes.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Reproducible Builds"),": Including source code and build scripts within the package ensures that builds can be reproduced locally, enhancing both security and transparency.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Monetization and Attribution"),": Built-in mechanisms support usage costs, modification payments, and contributor attribution, fostering a fair and incentivized ecosystem for developers.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"State Management"),": Packages manage state between invocations using isolated filesystem areas and state identifiers, supporting complex interactions and persistent sessions.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"AI-Native Interface"),': "napp" packages are designed to be "chattable," supporting natural language interfaces that allow AI systems to effectively perform function calls.'))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Comprehensive Documentation"),": Inclusion of descriptions, usage examples, API specifications, and metadata to facilitate developer engagement.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Testing and Validation"),": Provision of tests and example runs to assess package functionality and estimate execution costs prior to deployment."))),(0,i.kt)("h2",{id:"use-cases-and-applications"},"Use Cases and Applications"),(0,i.kt)("h3",{id:"serverless-platform-integration"},"Serverless Platform Integration"),(0,i.kt)("p",null,'"napp" packages can be deployed on serverless platforms, allowing developers to execute applications at scale without managing infrastructure. They support API calls over the network, facilitating integration into larger systems and enabling rapid deployment.'),(0,i.kt)("h3",{id:"browser-compatibility"},"Browser Compatibility"),(0,i.kt)("p",null,'"napp" packages compatible with browser environments can run directly within browsers by leveraging modern web technologies, enabling developers to build rich, interactive web applications with minimal configuration.'),(0,i.kt)("h3",{id:"ai-and-llm-integration"},"AI and LLM Integration"),(0,i.kt)("p",null,'By exposing functions that are optimized for AI-driven invocation, "napp" packages simplify interactions with LLMs. AI systems can seamlessly interface with packages through JSON parameters and natural language queries, thus enhancing AI-driven development workflows.'),(0,i.kt)("h2",{id:"conclusion"},"Conclusion"),(0,i.kt)("p",null,'The "napp" format provides a comprehensive approach to package design for the AI-integrated development ecosystem. By unifying cross-language interfaces, enhancing security, and integrating deterministic and probabilistic computing paradigms, "napp" offers a robust framework for AI-native applications. We encourage developers, AI researchers, and the broader community to explore and contribute to the "napp" format.'))}g.isMDXComponent=!0},54174:(e,a,t)=>{t.d(a,{Z:()=>n});const n=t.p+"assets/images/2024-10-15-napps-af6860129000d12c0b6cca912cdce707.jpg"}}]);