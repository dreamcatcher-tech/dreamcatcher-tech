"use strict";(self.webpackChunk_dreamcatcher_tech_dreamcatcher_website=self.webpackChunk_dreamcatcher_tech_dreamcatcher_website||[]).push([[4917],{14698:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var n=a(87462),i=(a(67294),a(3905));a(61839);const r={},s="I21 IPORM the IPFS ORM",o={unversionedId:"Ideas/I21",id:"Ideas/I21",title:"I21 IPORM the IPFS ORM",description:"I21 IPORM",source:"@site/dust/Ideas/I21.md",sourceDirName:"Ideas",slug:"/Ideas/I21",permalink:"/dust/Ideas/I21",draft:!1,editUrl:"https://github.com/dreamcatcher-tech/dreamcatcher-tech.github.io/edit/master/website/dust/Ideas/I21.md",tags:[],version:"current",frontMatter:{},sidebar:"dust",previous:{title:"I20 Dreamcatcher Algorithm v0",permalink:"/dust/Ideas/I20"}},l={},c=[{value:"Background",id:"background",level:2},{value:"Scope",id:"scope",level:2},{value:"Motivation",id:"motivation",level:2},{value:"Examples",id:"examples",level:2},{value:"Prisma user schema (model layer)",id:"prisma-user-schema-model-layer",level:3},{value:"Prisma client (processor layer)",id:"prisma-client-processor-layer",level:3},{value:"Objection User Model",id:"objection-user-model",level:3},{value:"Objection queries (processing layer)",id:"objection-queries-processing-layer",level:3},{value:"Proposal",id:"proposal",level:2},{value:"Principles",id:"principles",level:3},{value:"API Example",id:"api-example",level:3},{value:"Hints",id:"hints",level:3},{value:"Tests",id:"tests",level:2},{value:"Output is a standlone npm package",id:"output-is-a-standlone-npm-package",level:3},{value:"Replace existing IPLD schema specification",id:"replace-existing-ipld-schema-specification",level:3},{value:"Replace existing IPLD ORM",id:"replace-existing-ipld-orm",level:3},{value:"All 6 scope elements are met",id:"all-6-scope-elements-are-met",level:3}],p={toc:c};function h(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"i21-iporm-the-ipfs-orm"},"I21 IPORM the IPFS ORM"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"I21 IPORM",src:a(58664).Z,width:"1024",height:"1024"})),(0,i.kt)("h2",{id:"background"},"Background"),(0,i.kt)("p",null,"This document provides an idea in response to ",(0,i.kt)("a",{parentName:"p",href:"../Requests/R24"},"R24 IPFS ORM"),". We seek to define an MVP spec that serves the requests set out there."),(0,i.kt)("p",null,"Certain of the requests might not be serviceable in earlier passes of the work, in which case further intentions and directions will be discussed at the end of this document."),(0,i.kt)("h2",{id:"scope"},"Scope"),(0,i.kt)("p",null,"For the purposes of this iteration, we take the following request items as critical to the resulting deliverable being of any value."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Developer interface"),": providing an interface for managing CID's and managing iterations on the relationships between the data they represent, whilst hiding the details of this management."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"IPFS interface"),": using an abstracted interface for the underlying machinery so that a mock can be used to test correctness in a unit test."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"IPLD schema checking"),": Optionally associating each instance with an IPLD schema, and when provided, the instance should have tooling to check data against that schema."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Encryption"),": Encrypting items stored into IPFS before hashing them."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Schema change management"),": Suppressing explicit object relationship management allows developers to focus on data structure more and data management lifecycle less, which should result in easier schema changes to the core code."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Upstream change management"),": Decoupling the IPFS libraries from their consumption to allow them to change freely without requiring the consuming codebase to change")),(0,i.kt)("p",null,"The rest of the requests will be handled or designed for based on their ease of implementation."),(0,i.kt)("h2",{id:"motivation"},"Motivation"),(0,i.kt)("p",null,"There are a number of reasons to explode data into components for standalone storage on IPFS:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Different parties are interested in different parts of the data"),(0,i.kt)("li",{parentName:"ol"},"Different parts of the data have different churn rates and resource requirements"),(0,i.kt)("li",{parentName:"ol"},"Data structures are big enough that they need to be managed by reference"),(0,i.kt)("li",{parentName:"ol"},"Resiliency, ie getting data to replicate as quickly as possible"),(0,i.kt)("li",{parentName:"ol"},"Data type reuse in multiple contexts")),(0,i.kt)("p",null,"Broadly, these reasons are similar to the reasons you might choose to add a new foreign key to a database, so surveying prior art should help understand design decisions."),(0,i.kt)("p",null,"ORMs typically have two layers:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"The modeling language, which allows a developer to",(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},"Specify the shape of the data the model is handling"),(0,i.kt)("li",{parentName:"ol"},"Specify a schema that can check incoming or outgoing data for adherence to expected shape (can be folded in to (1) if the ability to tag attributes is sufficiently well developed)"),(0,i.kt)("li",{parentName:"ol"},"Specify any HAS A relationships to other data items that are also specified using the ORM"),(0,i.kt)("li",{parentName:"ol"},"Declare any functions or methods meant to process the data the class handles"))),(0,i.kt)("li",{parentName:"ol"},"The processor/client, which allows a developer to",(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},"Instance objects from a serialized format, including any nested objects, providing hydrated versions"),(0,i.kt)("li",{parentName:"ol"},"Serialize objects from live instances, including any nested objects"),(0,i.kt)("li",{parentName:"ol"},"Check during serialization/deserialization for adherence to a schema (sometimes automatic)"),(0,i.kt)("li",{parentName:"ol"},"Provide lifecycle hooks during serialization/deserialization")))),(0,i.kt)("h2",{id:"examples"},"Examples"),(0,i.kt)("h3",{id:"prisma-user-schema-model-layer"},(0,i.kt)("a",{parentName:"h3",href:"https://www.prisma.io/"},"Prisma")," user schema (model layer)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"model User {\n  id      Int      @id @default(autoincrement())\n  email   String   @unique\n  name    String?\n  role    Role     @default(USER)\n  posts   Post[]\n  profile Profile?\n}\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Key notes:")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Every property has a declared type"),(0,i.kt)("li",{parentName:"ol"},"Some properties have types that are defined elsewhere in the ORM models"),(0,i.kt)("li",{parentName:"ol"},"Properties have standard symbols that equip the processor with extra behaviour such as \u201c?\u201d for optional and \u201c[]\u201d for many"),(0,i.kt)("li",{parentName:"ol"},"There\u2019s an additional attribute language so that properties can be equipped with even more user defined behaviour during processing"),(0,i.kt)("li",{parentName:"ol"},"The model is parsed from the schema, which means that schema checking can be automatic and constant"),(0,i.kt)("li",{parentName:"ol"},"This approach requires crafting an additional parser"),(0,i.kt)("li",{parentName:"ol"},"There is no way in this schema language to declare methods that should come with the live object instances")),(0,i.kt)("h3",{id:"prisma-client-processor-layer"},(0,i.kt)("a",{parentName:"h3",href:"https://www.prisma.io/"},"Prisma")," client (processor layer)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const user = await prisma.user.findUnique({\n  where: {\n    email: 'emma@prisma.io',\n  },\n  select: {\n    email: true,\n    posts: {\n      select: {\n        likes: true,\n      },\n    },\n  },\n})\n\nconst deletePosts = prisma.post.deleteMany({\n  where: {\n    authorId: 7,\n  },\n})\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Key Notes:")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Prisma only provides interface level functionality on the client library/processor, eg CRUD"),(0,i.kt)("li",{parentName:"ol"},"Any extra verbs you would wish to add to types (eg \u201c",(0,i.kt)("inlineCode",{parentName:"li"},"tagPosts(tag)"),"\u201d) would need to exist in a higher level of the program that loads and writes objects instead of just being on the newly hydrated objects"),(0,i.kt)("li",{parentName:"ol"},"There\u2019s still quite a heavy syntax load inside the CRUD function arguments that don\u2019t entirely escape from thinking like an RDBMS"),(0,i.kt)("li",{parentName:"ol"},"Relations can also be queried from root nodes in the tree")),(0,i.kt)("h3",{id:"objection-user-model"},(0,i.kt)("a",{parentName:"h3",href:"https://vincit.github.io/objection.js/"},"Objection")," User Model"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"class Person extends Model {\n  static get tableName() {\n    return 'persons'\n  }\n\n  static get idColumn() {\n    return 'id'\n  }\n\n  fullName() {\n    return this.firstName + ' ' + this.lastName\n  }\n\n  static get jsonSchema() {\n    return {\n      type: 'object',\n      required: ['firstName', 'lastName'],\n\n      properties: {\n        id: { type: 'integer' },\n        parentId: { type: ['integer', 'null'] },\n        firstName: { type: 'string', maxLength: 255 },\n        lastName: { type: 'string', maxLength: 255 },\n        age: { type: 'number' },\n        address: {\n          type: 'object',\n          properties: {\n            street: { type: 'string' },\n            city: { type: 'string' },\n            zipCode: { type: 'string' },\n          },\n        },\n      },\n    }\n  }\n\n  static get relationMappings() {\n    const Animal = require('./Animal')\n    const Movie = require('./Movie')\n\n    return {\n      pets: {\n        relation: Model.HasManyRelation,\n        modelClass: Animal,\n        join: {\n          from: 'persons.id',\n          to: 'animals.ownerId',\n        },\n      },\n\n      movies: {\n        relation: Model.ManyToManyRelation,\n        modelClass: Movie,\n        join: {\n          from: 'persons.id',\n          through: {\n            from: 'persons_movies.personId',\n            to: 'persons_movies.movieId',\n          },\n          to: 'movies.id',\n        },\n      },\n    }\n  }\n}\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Key notes:")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Although much less terse, this model contains many of the same elements: schema checking, automatic de/serialization of children, decorating of certain properties with extra attributes (eg the relation property on relationMapping keys)"),(0,i.kt)("li",{parentName:"ol"},"In fact, this class definition could easily be a compile target for the prisma schema language"),(0,i.kt)("li",{parentName:"ol"},"Defining things in terms of class inheritance gives the developer the opportunity to add extra methods to the hydrated object"),(0,i.kt)("li",{parentName:"ol"},"Harder to learn")),(0,i.kt)("h3",{id:"objection-queries-processing-layer"},(0,i.kt)("a",{parentName:"h3",href:"https://vincit.github.io/objection.js/"},"Objection")," queries (processing layer)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const people = await Person.query().withGraphFetched({\n  pets: true,\n  children: {\n    pets: true,\n    children: true,\n  },\n})\n\nfor (const person of people) {\n  console.log(person.fullName())\n}\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Key notes:")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Has instance methods on the results objects"),(0,i.kt)("li",{parentName:"ol"},"Can query for a whole graph at once"),(0,i.kt)("li",{parentName:"ol"},"Treats objects as transient and composable by forming them with a query, which will give a different answer at a different point in time"),(0,i.kt)("li",{parentName:"ol"},"Does not have a 1:1 mapping between hydrated and dehydrated items, ie: a hydrated query result cannot be dehydrated")),(0,i.kt)("h2",{id:"proposal"},"Proposal"),(0,i.kt)("h3",{id:"principles"},"Principles"),(0,i.kt)("p",null,"With the background properly in place, we are ready to propose an intended interface. We adhere to the following rules in this proposal"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Use built in language features for MVP efforts"),": this strongly favours a modeling language like objection, which can eventually be a compile target for something fancier like graphql or prisma"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Keep it simple"),": Don\u2019t try to mix schemas and properties and relations into the some unwieldy format"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Colocate everything that is known statically about a model"),": Make it very easy to understand all the facts about a class you are looking at without jumping to a bunch of files"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Provide an extensible annotation system for properties"),": provision for the ability to add tags/functions to properties whose code is managed orthogonally. This will make it easier to add cross cutting behaviours in the future."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Assume the underlying layer is injected at runtime"),": so we can always test quickly with stubs"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Assume the basic use case is crushing and uncrushing data from a root object"),": the main thing this needs to do properly is move things on and off the wire")),(0,i.kt)("h3",{id:"api-example"},"API Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"/** @jsdoc\n  Here is where documentation about the Dmz would go, so that jsdoc can automatically\n  generate documentation for the models.\n**/\nclass Dmz extends Model {\n  fullName() {\n    return this.firstName + ' ' + this.lastName\n  }\n  static get ipldSchema() {\n    return `\ntype Dmz struct {\n    config &Config\n    timestamp Timestamp          # changes every block\n    network Network              # block implies net change\n    state &State\n    pending optional &Pending\n    approot optional PulseLink   # The latest known approot\n    binary optional Binary\n    covenant Covenant\n}\n`\n  }\n  postUncrush() {\n    // lifecycle hook\n    assert(this.fullName().length < 36)\n  }\n  preCrush() {\n    delete this.transientVar\n  }\n}\n\nconst iporm = await IPORM.open(getFn, putFn, classes, {\n  checkSchema: false,\n})\nawait iporm.uncrush.DMZ(cid, decrypter)\nawait iporm.crush(dmzInstance, encrypter)\n")),(0,i.kt)("h3",{id:"hints"},"Hints"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Timestamp class needs dependency injection"),(0,i.kt)("li",{parentName:"ol"},"No need for partial graph hydration"),(0,i.kt)("li",{parentName:"ol"},"State can\u2019t have any nested keys crushed"),(0,i.kt)("li",{parentName:"ol"},"Resolver can throw, but must eventually backed by a stateful object"),(0,i.kt)("li",{parentName:"ol"},"Binary can\u2019t be hydrated"),(0,i.kt)("li",{parentName:"ol"},"Keys can be changed on the fly"),(0,i.kt)("li",{parentName:"ol"},"Keys need to be stored on the pulsechain"),(0,i.kt)("li",{parentName:"ol"},"Changing keys is out of scope due to problems knowing what key to use for a ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/dreamcatcher-tech/dreamcatcher-stack/issues/109"},"historical Block referred to by the current Pulse"))),(0,i.kt)("h2",{id:"tests"},"Tests"),(0,i.kt)("p",null,"This Idea is considered implemented once these tests pass:"),(0,i.kt)("h3",{id:"output-is-a-standlone-npm-package"},"Output is a standlone npm package"),(0,i.kt)("p",null,"The folder for this module is in ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/dreamcatcher-tech/dreamcatcher-stack/tree/master/pkg/iporm"},"dreamcatcher-stack/pkg/iporm")," and is the only output. This should be published to npm and consumable as such."),(0,i.kt)("h3",{id:"replace-existing-ipld-schema-specification"},"Replace existing IPLD schema specification"),(0,i.kt)("p",null,"Currently the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/dreamcatcher-tech/dreamcatcher-stack/blob/9e1acbb2a4ac890249afb28f1d9e1706409b66a3/pkg/interblock/src/w006-schemas/IpldSchemas.md"},"IPLD specification")," for ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/dreamcatcher-tech/dreamcatcher-stack/tree/master/pkg/interblock"},"Interpulse")," is in subfolder ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/dreamcatcher-tech/dreamcatcher-stack/tree/master/pkg/interblock/src/w006-schemas"},"w006-schemas"),". This folder should be able to be deleted once the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/dreamcatcher-tech/dreamcatcher-stack/tree/master/pkg/interblock"},"Interpulse")," codebase is shifted to using the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/dreamcatcher-tech/dreamcatcher-stack/tree/master/pkg/iporm"},"iporm")," package, with no loss of fidelity in the descriptional information currently present."),(0,i.kt)("h3",{id:"replace-existing-ipld-orm"},"Replace existing IPLD ORM"),(0,i.kt)("p",null,"Currently the ORM used by ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/dreamcatcher-tech/dreamcatcher-stack/tree/master/pkg/interblock"},"Interpulse")," is in subfolder ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/dreamcatcher-tech/dreamcatcher-stack/tree/master/pkg/interblock/src/w008-ipld"},"w008-ipld"),". This folder should be able to provide the same functionality it currently does, but by depending entirely on ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/dreamcatcher-tech/dreamcatcher-stack/tree/master/pkg/iporm"},"iporm")," for its IPFS ORM functions instead of its current adhoc ORM."),(0,i.kt)("h3",{id:"all-6-scope-elements-are-met"},"All 6 ",(0,i.kt)("a",{parentName:"h3",href:"#scope"},"scope")," elements are met"),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"#scope"},"scope")," defines 6 crucial elements that must be judged to have been met by the implementation in a form at least free of any critical to function bugs or deficiencies."))}h.isMDXComponent=!0},58664:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/I21-49d710ddba305269a50128501023aea2.png"}}]);