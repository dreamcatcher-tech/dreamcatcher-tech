"use strict";(self.webpackChunk_dreamcatcher_tech_dreamcatcher_website=self.webpackChunk_dreamcatcher_tech_dreamcatcher_website||[]).push([[1556],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),d=a,h=u["".concat(s,".").concat(d)]||u[d]||m[d]||o;return n?r.createElement(h,i(i({ref:t},p),{},{components:n})):r.createElement(h,i({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},35294:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var r=n(83117),a=(n(67294),n(3905));const o={},i="R17 Covenant Resolution System",l={unversionedId:"Requests/R17",id:"Requests/R17",title:"R17 Covenant Resolution System",description:"Dependencies",source:"@site/dust/Requests/R17.md",sourceDirName:"Requests",slug:"/Requests/R17",permalink:"/dust/Requests/R17",draft:!1,editUrl:"https://github.com/dreamcatcher-tech/dreamcatcher-tech.github.io/edit/master/website/dust/Requests/R17.md",tags:[],version:"current",frontMatter:{},sidebar:"dust",previous:{title:"R16 Provenance Accounting",permalink:"/dust/Requests/R16"},next:{title:"R18 Name Resolution System for Interblock",permalink:"/dust/Requests/R18"}},s={},c=[{value:"Dependencies",id:"dependencies",level:2}],p={toc:c};function m(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"r17-covenant-resolution-system"},"R17 Covenant Resolution System"),(0,a.kt)("h2",{id:"dependencies"},"Dependencies"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"./R18"},"R18 Name Resolution System for Interblock"))),(0,a.kt)("p",null,"Being able to specify covenants easily, and have them looked up conveniently, is crucial to the developer experience."),(0,a.kt)("p",null,"A partial solution is hinted at in the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/dreamcatcher-tech/dreamcatcher-stack/blob/master/pkg/interblock/src/w006-schemas/IpldSchemas.md#covenant"},"IPLD Schemas")),(0,a.kt)("p",null,"Requirements:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Follow Deno as closely as possible, which follows the browser"),(0,a.kt)("li",{parentName:"ol"},"convenient bare name based references to Covenants"),(0,a.kt)("li",{parentName:"ol"},"app complex wide upgrades of all covenants at once"),(0,a.kt)("li",{parentName:"ol"},"lock file like application, where a covenant referred to by name can be locked to a as soon as the first resolution occurs"),(0,a.kt)("li",{parentName:"ol"},"allow any other package manager to be used within a covenant"),(0,a.kt)("li",{parentName:"ol"},"means of doing resolution using external registries in a priority order"),(0,a.kt)("li",{parentName:"ol"},"local filesystem resolution"),(0,a.kt)("li",{parentName:"ol"},"trivial sharing with other chains"),(0,a.kt)("li",{parentName:"ol"},"overrides in dev mode, or in forked mode"),(0,a.kt)("li",{parentName:"ol"},"permanent overrides, to patch deep dependencies without forking everything"),(0,a.kt)("li",{parentName:"ol"},"duck typing on covenants"),(0,a.kt)("li",{parentName:"ol"},"support import maps ?"),(0,a.kt)("li",{parentName:"ol"},"support pathing for nested covenants"),(0,a.kt)("li",{parentName:"ol"},"Allow specifying hashes in covenant config declarations, possibly via the locking mechanism"),(0,a.kt)("li",{parentName:"ol"},"Any Covenant contains the same code as any registry, so any covenant can be used as a registry where its children can be fetched by path"),(0,a.kt)("li",{parentName:"ol"},"Cover hashlocking of first run ? if a url has not been converted to a covenant, then we should be able to do that, for convenience, ie: direct form npm, or deno.land"),(0,a.kt)("li",{parentName:"ol"},"Should never run any install scripts - should only use inert data"),(0,a.kt)("li",{parentName:"ol"},"Covenants must be fully hashlocked or else you cannot load from them"),(0,a.kt)("li",{parentName:"ol"},"Support direct loading from git hashes with url hints"),(0,a.kt)("li",{parentName:"ol"},"Vendoring of dependencies should be automatic and instant on first use"),(0,a.kt)("li",{parentName:"ol"},"Be able to specify a hashlocked covenant by name alone, or a path root"),(0,a.kt)("li",{parentName:"ol"},"Integrate with generate resolution of names to chainIds then to paths, like urls."),(0,a.kt)("li",{parentName:"ol"},"Do not rely on a fast filesystem to be able to walk and test for multiple paths.  Ie: only allow specific paths - no guessing or auto completes"),(0,a.kt)("li",{parentName:"ol"},"import maps should allow arbitrary overrides of deeply nested dependency resolutions"),(0,a.kt)("li",{parentName:"ol"},"handle bare paths eg: ",(0,a.kt)("inlineCode",{parentName:"li"},"something")," or ",(0,a.kt)("inlineCode",{parentName:"li"},"something/deeper")),(0,a.kt)("li",{parentName:"ol"},"handle absolute paths eg: ",(0,a.kt)("inlineCode",{parentName:"li"},"interblock://somechainname"))))}m.isMDXComponent=!0}}]);